filename : "XmlParser";
include : "Include/stdafx.h";
namespace : "ztl";
namespace : "xml";
dirname : "xml";
class Node
{
};

class Text : Node
{
    token content;
};

class CData : Node
{
    token content ;
};

class Attribute : Node
{
    token name;
    token value ;
};

class Comment : Node
{
    token content ;
};

class Element : Node
{
    token name ;
    token closingName ;
    Attribute[] attributes;
    Node[] subNodes;
};

class Instruction : Node
{
    token name ;
    Attribute[] attributes;
};

class Document : Node
{
    Node[] prologs;
    Element rootElement;
};

token INSTRUCTIONOPEN = "<\?";
token INSTRUCTIONCLOSE = "\?>" ;
token COMPLEXELEMENTOPEN = "</" ;
token SINGLEELEMENTCLOSE = "/>" ;
token ELEMENTOPEN = "<" ;
token ELEMENTCLOSE = ">" ;
token EQUAL = "=";
token NAME = "[a-zA-Z0-9:._\-]+" ;
token ATTVALUE = "\"[^<>\"]*\"|'[^<>']*'" ;
token COMMENT = "<!--([^\->]|-[^\->]|--[^>])*-->";
token CDATA = "<!\[CDATA\[([^\]]|\][^\]]|\]\][^>])*\]\]>";
token TEXT = "([^<>=\"' \r\n\ta-zA-Z0-9:._\-])+|\"|'";
ignoretoken SPACE = "\s+";

rule Attribute XAttribute
        = NAME : name "=" ATTVALUE : value as Attribute
        ;
rule Text XText
        = NAME : content | EQUAL : content | ATTVALUE : content | TEXT : content as Text
        ;
rule CData XCData
        = CDATA : content as CData
        ;
rule Comment XComment
        = COMMENT : content as Comment
        ;
rule Element XElement
        = "<" NAME : name { XAttribute : attributes }  "/>" as Element
		=  "<" NAME : name { XAttribute : attributes } ">" { XSubNode : subNodes } "</" NAME : closingName ">" as Element
        ;
rule Node XSubNode
        = !XText | !XCData | !XComment | !XElement
        ;
rule Instruction XInstruction
        = "<?" NAME : name { XAttribute : attributes } "?>" as Instruction
        ;
rule Document XDocument
        = { XInstruction : prologs | XComment : prologs } XElement : rootElement as Document
        ;
