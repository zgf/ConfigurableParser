include : "zgf" ;
namespace : "xml" ;
		struct GeneralHeadInfoDefine
		{
			wstring    property;
			wstring    value;
		};
		
		class GeneralTokenDefine
		{
			enum TokenOptional
			{
				False,
				True,
			};
			wstring			name;
			wstring			regex;
			TokenOptional	ignore;
		};

	
		class GeneralTypeObject
		{

		};

		class GeneralArrayTypeObject :  GeneralTypeObject
		{
			GeneralTypeObject			element;
		};
	
		class GeneralStringTypeObject :  GeneralTypeObject
		{

		};
		class GeneralNormalTypeObject :  GeneralTypeObject
		{
			wstring									name;
		};
		class GeneralSubTypeObject :  GeneralTypeObject
		{
			GeneralTypeObject						parent;
			wstring									name;
		};
		
		class GeneralTypeDefine
		{

		};
		class GeneralClassTypeDefine :  GeneralTypeDefine
		{
			GeneralTypeDefine[]				subTypes;
			GeneralClassMemberTypeDefine[]	members;
			GeneralTypeObject				parent;
			wstring						name;
		};
		class GeneralEnumTypeDefine :  GeneralTypeDefine
		{
			GeneralEnumMemberTypeDefine[]			members;
			wstring								name;
		};
		class GeneralClassMemberTypeDefine :  GeneralTypeDefine
		{
			GeneralTypeObject						   type;
			wstring									name;
		};
		class GeneralEnumMemberTypeDefine :  GeneralTypeDefine
		{
			wstring									name;
		};
		class GeneralGrammarTypeDefine 
		{

		};
		class GeneralGrammarTextTypeDefine :  GeneralGrammarTypeDefine
		{
			wstring												text;
		};
		class GeneralGrammarNormalTypeDefine :  GeneralGrammarTypeDefine
		{
			wstring												name;
		};
		class GeneralGrammarSequenceTypeDefine :  GeneralGrammarTypeDefine
		{
			GeneralGrammarTypeDefine				first;
			GeneralGrammarTypeDefine				second;
		};
		class GeneralGrammarLoopTypeDefine :  GeneralGrammarTypeDefine
		{
			GeneralGrammarTypeDefine				grammar;
		};
		class GeneralGrammarOptionalTypeDefine :  GeneralGrammarTypeDefine
		{
			GeneralGrammarTypeDefine				grammar;
		};
		class GeneralGrammarAssignTypeDefine :  GeneralGrammarTypeDefine
		{
			wstring									name;
			GeneralGrammarTypeDefine				grammar;
		};
		
		class GeneralGrammarSetterTypeDefine :  GeneralGrammarTypeDefine
		{
			GrammarDef grammar;
			wstring												name;
			wstring												value;
		};
		
		class GeneralGrammarUsingTypeDefine :  GeneralGrammarTypeDefine
		{
			GeneralGrammarTypeDefine				grammar;
		};
		class GeneralGrammarCreateTypeDefine :  GeneralGrammarTypeDefine
		{
			GeneralTypeObject						type;
			GeneralGrammarTypeDefine				grammar;
		};
		
		class GeneralGrammarAlternationTypeDefine : GeneralGrammarTypeDefine
		{
			GeneralGrammarTypeDefine left;
			GeneralGrammarTypeDefine right;
		};
		class GeneralRuleDefine
		{
			GeneralTypeObject						type;
			wstring								name;
			GeneralGrammarTypeDefine[]				grammars;
		};
		class GeneralTableDefine
		{
			GeneralHeadInfoDefine[] heads;
			GeneralTypeDefine[]   types;
			GeneralTokenDefine[]  tokens;
			GeneralRuleDefine[]   rules;
		};
		
token CLASS = "class";
token STRUCT = "struct";
token ENUM = "enum";
token TOKEN = "token";
token DISCARDTOKEN = "ignoretoken";
token RULE = "rule";
token AS = "as";
token WITH = "with";
token OPEN = "{";
token CLOSE = "}";
token SEMICOLON = ";";
token COLON = ":";
token COMMA = ",";
token DOT = ".";
token ASSIGN = "=";
token USING = "!";
token OR = "|";
token OPTOPEN = "\[";
token OPTCLOSE = "\]";
token PREOPEN = "\(";
token PRECLOSE = "\)";

rule GeneralTypeObject Type
        = NAME : name as GeneralNormalTypeObject
        = "token" as GeneralTokenTypeObject
        = Type : parent "." NAME : name as GeneralSubTypeObject 
        = Type : element "[" "]" as GeneralArrayTypeObject
        ;
rule GeneralEnumMemberTypeDefine EnumMember
        = NAME : name "," as GeneralEnumMemberTypeDefine 
        ;
rule GeneralEnumTypeDefine Enum
        = "enum" NAME : name  "{" { EnumMember : members } "}" as GeneralEnumTypeDefine
        ;
rule GeneralClassMemberTypeObject ClassMember
        = Type : type NAME : name ";" as GeneralClassMemberTypeObject
        ;
rule GeneralTypeDefine TypeDecl
        = !Enum | !Class
        ;

rule GeneralClassTypeDefine Class
        = ("struct" |"class") NAME : name [ ":" Type : parent ] "{" { ClassMember : members | TypeDecl : subTypes } "}" ";" as GeneralClassTypeDefine
        ;
rule GeneralGrammarTypeDefine SequenceGrammar
        = !PrimitiveGrammar
        = SequenceGrammar : first PrimitiveGrammar : second as GeneralGrammarSequenceTypeDefine
        ;
rule GeneralGrammarTypeDefine AlternativeGrammar
        = !SequenceGrammar
        = AlternativeGrammar : left "|" SequenceGrammar : right as GeneralGrammarAlternationTypeDefine
        ;

rule GeneralGrammarTypeDefine Grammar
        = !AlternativeGrammar
        = Grammar : grammar "as" Type : type as GeneralGrammarCreateTypeDefine
        = Grammar : grammar "with" "{" NAME : name "=" STRING : value  "}"  as GeneralGrammarSetterTypeDefine
		;
rule GeneralGrammarTypeDefine NormalGrammar
        = NAME : name as GeneralGrammarNormalTypeDefine
		;

rule GeneralGrammarTypeDefine AssginGrammar
		= NormalGrammar : grammar ":" NAME : name as GeneralGrammarAssignTypeDefine
		= STRING : text as GeneralGrammarTextTypeDefine
		= "(" !Grammar ")"
		;

rule GeneralGrammarTypeDefine PrimitiveGrammar
        =  !AssginGrammar
        = "!" NormalGrammar : grammar as GeneralGrammarUsingTypeDefine
        = "[" Grammar : grammar "]" as GeneralGrammarOptionalTypeDefine
        = "{" Grammar : grammar "}" as GeneralGrammarLoopTypeDefine
        ;

rule GeneralTokenDefine TokenDecl
        = "token" NAME : name "=" STRING : regex ";" as GeneralTokenDefine with { ignore = "False" }
        = "ignoretoken" NAME : name "=" STRING : regex ";" as GeneralTokenDefine with { ignore = "True" }
        ;
rule GeneralHeadInfoDefine HeadDecl = NAME : property ":" STRING : value ";" as GeneralHeadInfoDefine
		;
rule GeneralRuleDefine RuleDecl
        = "rule" Type : type NAME : name { "=" Grammar : grammars } ";" as GeneralRuleDefine
        ;
rule GeneralTableDefine ParserDecl
        = {HeadDecl : heads}| { TypeDecl : definitions} |{ TokenDecl : definitions} |{ RuleDecl : definitions } as GeneralTableDefine
        ;
